{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react_project\\\\src\\\\pages\\\\WeatherPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  text-align:center;\n`;\n_c = Container;\nconst Button = styled.button`\n  padding:10px 20px;\n  font-size:18px;\n  cursor:pointer;\n  background-color:#ccc;\n  border:none;\n  border-radius:7px;\n  &:hover{\n    background-color:#e69;\n  }\n`;\n_c2 = Button;\nconst LoadingSpinner = styled.div`\n  border:4px solid #eee;\n  border-top:4px solid #39b;\n  border-radius:50%;\n  width:60px; \n  height:60px;\n  margin:0 auto;\n  animation:spin 2.5s linear infinite;\n  @keyframes spin{\n    0%{ transform:rotate(0deg)}\n    100%{ transform:rotate(360deg)}\n  }\n`;\n_c3 = LoadingSpinner;\nconst cityMapping = {\n  '서울': 'Seoul',\n  '인천': 'Incheon',\n  '수원': 'Suwon-si',\n  '성남': 'Seongnam-si',\n  '고양': 'Goyang-si',\n  '부산': 'Busan',\n  '대구': 'Daegu',\n  '광주': 'Gwangju',\n  '대전': 'Daejeon',\n  '울산': 'Ulsan',\n  '세종': 'Sejong'\n};\nfunction WeatherPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    region,\n    city\n  } = useParams();\n  const [weatherData, setWeatherData] = useState(null);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      const apiKey = 'API_KEY';\n      const mappedCity = cityMapping[city] || city;\n      try {\n        const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        setWeatherData(response.data);\n      } catch (error) {\n        alert(error.response.data.message);\n      }\n    };\n    fetchWeather();\n  }, [city]);\n  const backMove = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: `${region}지역 - ${city}시의 날씨 정보`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), weatherData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weatherData.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: new Date().toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC628\\uB3C4 : \", weatherData.main.temp, \"\\xB0C \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uCCB4\\uAC10\\uC628\\uB3C4 : \", weatherData.main.feels_like, \"\\xB0C \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD48D\\uC18D : \", weatherData.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB0A0\\uC528 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: backMove,\n      children: \"\\uB2E4\\uB978\\uC9C0\\uC5ED \\uC120\\uD0DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherPage, \"z6iVkRlvJ8ytjCNS/uM1LtxgGFk=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c4 = WeatherPage;\nexport default WeatherPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"LoadingSpinner\");\n$RefreshReg$(_c4, \"WeatherPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","styled","jsxDEV","_jsxDEV","Container","div","_c","Button","button","_c2","LoadingSpinner","_c3","cityMapping","WeatherPage","_s","navigate","region","city","weatherData","setWeatherData","fetchWeather","apiKey","mappedCity","response","get","params","q","appid","units","lang","data","error","alert","message","backMove","children","fileName","_jsxFileName","lineNumber","columnNumber","weather","description","Date","toLocaleDateString","main","temp","feels_like","wind","speed","onClick","_c4","$RefreshReg$"],"sources":["D:/project/react_project/src/pages/WeatherPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  text-align:center;\r\n`;\r\nconst Button = styled.button`\r\n  padding:10px 20px;\r\n  font-size:18px;\r\n  cursor:pointer;\r\n  background-color:#ccc;\r\n  border:none;\r\n  border-radius:7px;\r\n  &:hover{\r\n    background-color:#e69;\r\n  }\r\n`;\r\n\r\nconst LoadingSpinner = styled.div`\r\n  border:4px solid #eee;\r\n  border-top:4px solid #39b;\r\n  border-radius:50%;\r\n  width:60px; \r\n  height:60px;\r\n  margin:0 auto;\r\n  animation:spin 2.5s linear infinite;\r\n  @keyframes spin{\r\n    0%{ transform:rotate(0deg)}\r\n    100%{ transform:rotate(360deg)}\r\n  }\r\n`;\r\n\r\nconst cityMapping = {\r\n  '서울':'Seoul',\r\n  '인천':'Incheon',\r\n  '수원':'Suwon-si',\r\n  '성남':'Seongnam-si',\r\n  '고양':'Goyang-si',\r\n  '부산':'Busan',\r\n  '대구':'Daegu',\r\n  '광주':'Gwangju',\r\n  '대전':'Daejeon',\r\n  '울산':'Ulsan',\r\n  '세종':'Sejong'\r\n}\r\n\r\nfunction WeatherPage(){\r\n  const navigate = useNavigate();\r\n  const { region, city } = useParams();\r\n  const [weatherData, setWeatherData] = useState(null);\r\n\r\n  useEffect(()=>{\r\n    const fetchWeather = async () =>{\r\n      const apiKey = 'API_KEY';\r\n      const mappedCity = cityMapping[city] || city;\r\n      try{\r\n        const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\r\n          params:{\r\n            q:`${mappedCity},KR`,\r\n            appid:apiKey,\r\n            units:'metric',\r\n            lang:'kr',\r\n          }\r\n        });\r\n        setWeatherData(response.data);\r\n      } catch (error) {\r\n        alert(error.response.data.message);\r\n      }\r\n    };\r\n    fetchWeather();\r\n  }, [city])\r\n\r\n  const backMove = ()=>{\r\n    navigate('/');\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <h1>{`${region}지역 - ${city}시의 날씨 정보`}</h1>\r\n      {weatherData ? (\r\n        <div>\r\n          <h2>{weatherData.weather[0].description}</h2>\r\n          <p><strong>{new Date().toLocaleDateString()}</strong></p>\r\n          <p>온도 : {weatherData.main.temp}&deg;C </p>\r\n          <p>체감온도 : {weatherData.main.feels_like}°C </p>\r\n          <p>풍속 : {weatherData.wind.speed} m/s</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <LoadingSpinner />\r\n          <p>날씨 정보를 불러오는 중입니다...</p>\r\n        </div>\r\n      )}\r\n      <Button onClick={backMove}>다른지역 선택</Button>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default WeatherPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}