{"ast":null,"code":"var _jsxFileName = \"/Volumes/\\u1103\\u1161\\u1103\\u1162\\u11BC\\u1103\\u1162\\u11BC/project/react_project/src/pages/WeatherPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  text-align: center;\n`;\n_c = Container;\nconst Button = styled.button`\n  text-indent:-9999px;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  position: fixed;\n  right: 15px;\n  top: 20px;\n`;\n_c2 = Button;\nconst LoadingSpinner = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 300px;\n  left: 50%;\n  margin-left: -150px;\n  height: 3px;\n  background: rgba(255, 255, 255, .1);\n  &:before {\n    animation: progress1 4s infinite;\n    transform-origin: 0 0;\n    content: \"\";\n    display: block;\n    width: 300px;\n    height: 100%;\n    background: linear-gradient(to right, rgba(255, 255, 255, 0.1) 10%, rgba(255, 255, 255, 0.4) 80%, rgba(255, 255, 255, 1));\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    animation: progress2 4s infinite;\n    transform-origin: 90% 50%;\n    margin-left: -24px;\n    top: -9px;\n    width: 30px;\n    height: 21px;\n    border-radius: 2px;\n    background: rgba(210, 189, 255, .55);\n    filter: blur(8px);\n    box-shadow: 0 0 10px 6px rgba(210, 189, 255, .4),\n                -20px 0 15px 4px rgba(210, 189, 255, .3),\n                -40px 0 15px 2px rgba(210, 189, 255, .2),\n                -60px 0 10px 1px rgba(210, 189, 255, .1),\n                -80px 0 10px 1px rgba(210, 189, 255, .05);\n  }\n  @keyframes progress1 {\n    0% {\n      transform: scalex(0);\n      opacity: .5;\n    }\n    90% {\n      transform: scalex(1);\n      opacity: 1;\n    }\n    100% {\n      transform: scalex(1);\n      opacity: 0;\n    }\n  }\n  \n  @keyframes progress2 {\n    0% {\n      transform: scale(.3, .8) translatez(0);\n      opacity: 0;\n    }\n    90% {\n      transform: scale(1, 1) translatex(300px) translatez(0);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(1, 1) translatex(300px) translatez(0);\n      opacity: 0;\n    }\n  }\n`;\n_c3 = LoadingSpinner;\nconst cityMapping = {\n  '서울': 'Seoul',\n  '인천': 'Incheon',\n  '수원': 'Suwon-si',\n  '성남': 'Seongnam-si',\n  '고양': 'Goyang-si',\n  '부산': 'Busan',\n  '대구': 'Daegu',\n  '광주': 'Gwangju',\n  '대전': 'Daejeon',\n  '울산': 'Ulsan',\n  '세종': 'Sejong'\n};\nfunction WeatherPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    city\n  } = useParams();\n  const [weatherData, setWeatherData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [forecastData, setForecastData] = useState(null);\n  const now = Date.now();\n  const twentyFourHoursLater = now + 24 * 60 * 60 * 1000; // 현재 시간 + 24시간\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      setIsLoading(true);\n      const apiKey = '28e07dfa61cced0cd42f9dc297ccc2f8'; // 나의 apiKey\n      const mappedCity = cityMapping[city] || city;\n      try {\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        setWeatherData(weatherResponse.data);\n        setForecastData(forecastResponse.data);\n      } catch (error) {\n        alert(error.response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchWeather();\n  }, [city]);\n  const backMove = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"weatherpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `${city}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), weatherData && forecastData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"today\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currentTemp\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`,\n            alt: weatherData.weather[0].description,\n            style: {\n              width: '120px',\n              height: '120px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(weatherData.main.temp), \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: weatherData.weather[0].description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"temp\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uCD5C\\uC800 : \", Math.round(weatherData.main.temp_min), \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uCD5C\\uACE0 : \", Math.round(weatherData.main.temp_max), \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hour\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scroll-container\",\n            children: forecastData.list.filter(forecast => forecast.dt * 1000 >= now && forecast.dt * 1000 <= twentyFourHoursLater) // 현재 시간과 24시간 이후의 데이터만 필터링\n            .map((forecast, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: new Date(forecast.dt * 1000).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    hour12: false\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n                alt: forecast.weather[0].description,\n                style: {\n                  width: '50px',\n                  height: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [Math.round(forecast.main.temp), \"\\xB0C \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"week\",\n        children:\n        // 하루에 해당하는 데이터를 묶어서, 해당하는 하루의 최저/최고 기온을 계산\n        forecastData.list.filter((_, index) => index % 8 === 0) // 하루에 해당하는 첫 번째 데이터만 필터링\n        .map((forecast, index) => {\n          const forecastDate = new Date(forecast.dt * 1000); // 예보 날짜\n          const isToday = forecastDate.toDateString() === new Date().toDateString(); // 오늘인지 확인\n          const options = {\n            weekday: 'long'\n          }; // 요일 포맷 설정\n          const displayDate = isToday ? '오늘' : forecastDate.toLocaleDateString(undefined, options); // 오늘은 '오늘', 나머지는 요일로 표시\n\n          // 해당 날짜의 데이터 필터링\n          const dayData = forecastData.list.filter(item => {\n            const itemDate = new Date(item.dt * 1000);\n            return itemDate.toDateString() === forecastDate.toDateString(); // 같은 날짜의 데이터만 필터링\n          });\n\n          // 최저 기온과 최고 기온 계산\n          const tempMin = Math.min(...dayData.map(item => item.main.temp_min));\n          const tempMax = Math.max(...dayData.map(item => item.main.temp_max));\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"day\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: displayDate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 18\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: new Date(forecast.dt * 1000).toLocaleDateString(undefined, {\n                  month: '2-digit',\n                  day: '2-digit'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n              alt: forecast.weather[0].description,\n              style: {\n                width: '50px',\n                height: '50px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(tempMin), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(tempMax), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 13\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 11\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uB0A0\\uC528 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: backMove,\n      className: \"more\",\n      children: \"\\uB4A4\\uB85C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherPage, \"tsiWBlauVb1HP5Gnv7BdCJEX3VM=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c4 = WeatherPage;\nexport default WeatherPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"LoadingSpinner\");\n$RefreshReg$(_c4, \"WeatherPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","styled","jsxDEV","_jsxDEV","Container","div","_c","Button","button","_c2","LoadingSpinner","_c3","cityMapping","WeatherPage","_s","navigate","city","weatherData","setWeatherData","isLoading","setIsLoading","forecastData","setForecastData","now","Date","twentyFourHoursLater","fetchWeather","apiKey","mappedCity","weatherResponse","get","params","q","appid","units","lang","forecastResponse","data","error","alert","response","message","backMove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","weather","icon","alt","description","style","width","height","Math","round","main","temp","temp_min","temp_max","list","filter","forecast","dt","map","index","toLocaleTimeString","hour","hour12","_","forecastDate","isToday","toDateString","options","weekday","displayDate","toLocaleDateString","undefined","dayData","item","itemDate","tempMin","min","tempMax","max","month","day","onClick","_c4","$RefreshReg$"],"sources":["/Volumes/다댕댕/project/react_project/src/pages/WeatherPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  text-indent:-9999px;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  position: fixed;\r\n  right: 15px;\r\n  top: 20px;\r\n`;\r\n\r\nconst LoadingSpinner = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  width: 300px;\r\n  left: 50%;\r\n  margin-left: -150px;\r\n  height: 3px;\r\n  background: rgba(255, 255, 255, .1);\r\n  &:before {\r\n    animation: progress1 4s infinite;\r\n    transform-origin: 0 0;\r\n    content: \"\";\r\n    display: block;\r\n    width: 300px;\r\n    height: 100%;\r\n    background: linear-gradient(to right, rgba(255, 255, 255, 0.1) 10%, rgba(255, 255, 255, 0.4) 80%, rgba(255, 255, 255, 1));\r\n  }\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    animation: progress2 4s infinite;\r\n    transform-origin: 90% 50%;\r\n    margin-left: -24px;\r\n    top: -9px;\r\n    width: 30px;\r\n    height: 21px;\r\n    border-radius: 2px;\r\n    background: rgba(210, 189, 255, .55);\r\n    filter: blur(8px);\r\n    box-shadow: 0 0 10px 6px rgba(210, 189, 255, .4),\r\n                -20px 0 15px 4px rgba(210, 189, 255, .3),\r\n                -40px 0 15px 2px rgba(210, 189, 255, .2),\r\n                -60px 0 10px 1px rgba(210, 189, 255, .1),\r\n                -80px 0 10px 1px rgba(210, 189, 255, .05);\r\n  }\r\n  @keyframes progress1 {\r\n    0% {\r\n      transform: scalex(0);\r\n      opacity: .5;\r\n    }\r\n    90% {\r\n      transform: scalex(1);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scalex(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n  \r\n  @keyframes progress2 {\r\n    0% {\r\n      transform: scale(.3, .8) translatez(0);\r\n      opacity: 0;\r\n    }\r\n    90% {\r\n      transform: scale(1, 1) translatex(300px) translatez(0);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scale(1, 1) translatex(300px) translatez(0);\r\n      opacity: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst cityMapping = {\r\n  '서울': 'Seoul',\r\n  '인천': 'Incheon',\r\n  '수원': 'Suwon-si',\r\n  '성남': 'Seongnam-si',\r\n  '고양': 'Goyang-si',\r\n  '부산': 'Busan',\r\n  '대구': 'Daegu',\r\n  '광주': 'Gwangju',\r\n  '대전': 'Daejeon',\r\n  '울산': 'Ulsan',\r\n  '세종': 'Sejong'\r\n};\r\n\r\nfunction WeatherPage() {\r\n  const navigate = useNavigate();\r\n  const { city } = useParams();\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const now = Date.now();\r\n  const twentyFourHoursLater = now + 24 * 60 * 60 * 1000; // 현재 시간 + 24시간\r\n\r\n  useEffect(() => {\r\n    const fetchWeather = async () => {\r\n      setIsLoading(true);\r\n      const apiKey = '28e07dfa61cced0cd42f9dc297ccc2f8'; // 나의 apiKey\r\n      const mappedCity = cityMapping[city] || city;\r\n\r\n      try {\r\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n        setWeatherData(weatherResponse.data);\r\n        setForecastData(forecastResponse.data);\r\n      } catch (error) {\r\n        alert(error.response.data.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchWeather();\r\n  }, [city]);\r\n\r\n  const backMove = () => {\r\n    navigate('/');\r\n  }\r\n\r\n\r\n  return (\r\n    <Container className=\"weatherpage\">\r\n      <h2>{`${city}`}</h2>\r\n      {weatherData && forecastData ? (\r\n        <div>\r\n          <div className=\"today\">\r\n            <div className='currentTemp'>\r\n              <img src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} alt={weatherData.weather[0].description} style={{ width: '120px', height: '120px' }} />\r\n              <p>{Math.round(weatherData.main.temp)}&deg;</p>\r\n            </div>\r\n            <h3>{weatherData.weather[0].description}</h3>\r\n            <div className='temp'>\r\n              <p>최저 : {Math.round(weatherData.main.temp_min)}&deg;</p>\r\n              <p>최고 : {Math.round(weatherData.main.temp_max)}&deg;</p>\r\n            </div>\r\n            <div className=\"hour\">\r\n            <div className=\"scroll-container\">\r\n            {\r\n          forecastData.list\r\n            .filter((forecast) => forecast.dt * 1000 >= now && forecast.dt * 1000 <= twentyFourHoursLater) // 현재 시간과 24시간 이후의 데이터만 필터링\r\n            .map((forecast, index) => (\r\n              <div key={index} className=\"forecast\">\r\n                <p><strong>{new Date(forecast.dt * 1000).toLocaleTimeString([], { hour: '2-digit', hour12: false })}</strong></p>\r\n                <img src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`} alt={forecast.weather[0].description} style={{ width: '50px', height: '50px' }} />\r\n                <p>{Math.round(forecast.main.temp)}&deg;C </p>\r\n              </div>\r\n            ))\r\n            }\r\n      </div>\r\n    </div>\r\n          </div>\r\n          <div className=\"week\">\r\n  {\r\n    // 하루에 해당하는 데이터를 묶어서, 해당하는 하루의 최저/최고 기온을 계산\r\n    forecastData.list\r\n      .filter((_, index) => index % 8 === 0) // 하루에 해당하는 첫 번째 데이터만 필터링\r\n      .map((forecast, index) => {\r\n        const forecastDate = new Date(forecast.dt * 1000); // 예보 날짜\r\n        const isToday = forecastDate.toDateString() === new Date().toDateString(); // 오늘인지 확인\r\n        const options = { weekday: 'long' }; // 요일 포맷 설정\r\n        const displayDate = isToday ? '오늘' : forecastDate.toLocaleDateString(undefined, options); // 오늘은 '오늘', 나머지는 요일로 표시\r\n\r\n        // 해당 날짜의 데이터 필터링\r\n        const dayData = forecastData.list.filter(item => {\r\n          const itemDate = new Date(item.dt * 1000);\r\n          return itemDate.toDateString() === forecastDate.toDateString(); // 같은 날짜의 데이터만 필터링\r\n        });\r\n\r\n        // 최저 기온과 최고 기온 계산\r\n        const tempMin = Math.min(...dayData.map(item => item.main.temp_min));\r\n        const tempMax = Math.max(...dayData.map(item => item.main.temp_max));\r\n\r\n        return (\r\n          <div key={index} className=\"forecast\">\r\n            <div className=\"day\">\r\n              <p><strong>{displayDate}</strong></p>\r\n              <p>{new Date(forecast.dt * 1000).toLocaleDateString(undefined, { month: '2-digit', day: '2-digit' })}</p>\r\n            </div>\r\n            <img src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`} alt={forecast.weather[0].description} style={{ width: '50px', height: '50px' }} />\r\n            <p>{Math.round(tempMin)}&deg;</p>\r\n            <p>{Math.round(tempMax)}&deg;</p>\r\n          </div>\r\n        );\r\n      })\r\n  }\r\n</div>\r\n\r\n        </div>\r\n      ) : (\r\n        <div className=\"loading\">\r\n          <LoadingSpinner />\r\n          <p>날씨 정보를 불러오는 중입니다...</p>\r\n        </div>\r\n      )}\r\n      <Button onClick={backMove} className=\"more\">뒤로</Button>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default WeatherPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}