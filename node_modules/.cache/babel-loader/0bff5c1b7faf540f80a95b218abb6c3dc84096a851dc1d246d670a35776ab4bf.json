{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\react_project\\\\src\\\\pages\\\\WeatherPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './styles.scss'; // SCSS 파일 import\n\n// 날씨 설명을 사용자 정의 설명으로 변환하는 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getCustomWeatherDescription(description) {\n  switch (description.toLowerCase()) {\n    case 'clear sky':\n      return '맑은 하늘';\n    case 'few clouds':\n      return '조금 구름';\n    case 'scattered clouds':\n      return '흩어진 구름';\n    case 'rain':\n    case 'light rain':\n      return '비 오는 날';\n    case 'snow':\n      return '눈 오는 날';\n    default:\n      return description;\n    // 기본적으로 원래의 설명을 사용\n  }\n}\n\n// 날씨와 시간에 따라 배경 클래스를 반환하는 함수\nfunction getBackgroundClass(weather, hour) {\n  if (!weather) return 'default';\n  if (weather.toLowerCase() === 'clear sky') {\n    return hour >= 6 && hour < 18 ? 'day-clear' : 'night-clear';\n  } else if (weather.toLowerCase().includes('rain')) {\n    return 'rainy';\n  } else if (weather.toLowerCase() === 'snow') {\n    return 'snowy';\n  } else if (weather.toLowerCase().includes('cloud')) {\n    return hour >= 6 && hour < 18 ? 'day-cloudy' : 'night-cloudy';\n  } else {\n    return 'default';\n  }\n}\nfunction WeatherPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    city\n  } = useParams();\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [backgroundClass, setBackgroundClass] = useState('default');\n  const now = Date.now();\n  const twentyFourHoursLater = now + 24 * 60 * 60 * 1000; // 현재 시간 + 24시간\n\n  // 날씨 데이터 로드 후 배경 클래스 업데이트\n  useEffect(() => {\n    if (weatherData) {\n      const weatherDescription = weatherData.weather[0].description;\n      const currentHour = new Date().getHours();\n      const newBackgroundClass = getBackgroundClass(weatherDescription, currentHour);\n      setBackgroundClass(newBackgroundClass);\n    }\n  }, [weatherData]);\n\n  // 날씨 및 예보 데이터 fetch\n  useEffect(() => {\n    const fetchWeather = async () => {\n      setIsLoading(true);\n      const apiKey = '28e07dfa61cced0cd42f9dc297ccc2f8'; // API 키\n      const mappedCity = cityMapping[city] || city; // 도시 매핑 (필요에 따라 정의)\n\n      try {\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        setWeatherData(weatherResponse.data);\n        setForecastData(forecastResponse.data);\n      } catch (error) {\n        alert(error.response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchWeather();\n  }, [city]);\n\n  // 뒤로 가기 버튼 핸들러\n  const backMove = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `background ${backgroundClass}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weatherpage\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: `${city}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uB0A0\\uC528 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this) : weatherData && forecastData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"currentTemp\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`,\n              alt: weatherData.weather[0].description,\n              style: {\n                width: '120px',\n                height: '120px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(weatherData.main.temp), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: getCustomWeatherDescription(weatherData.weather[0].description)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temp\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uCD5C\\uC800 : \", Math.round(weatherData.main.temp_min), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uCD5C\\uACE0 : \", Math.round(weatherData.main.temp_max), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hour\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scroll-container\",\n            children: forecastData.list.filter(forecast => forecast.dt * 1000 >= now && forecast.dt * 1000 <= twentyFourHoursLater).map((forecast, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: new Date(forecast.dt * 1000).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    hour12: false\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 28\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n                alt: forecast.weather[0].description,\n                style: {\n                  width: '50px',\n                  height: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [Math.round(forecast.main.temp), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week\",\n          children: forecastData.list.filter((_, index) => index % 8 === 0).map((forecast, index) => {\n            const forecastDate = new Date(forecast.dt * 1000);\n            const isToday = forecastDate.toDateString() === new Date().toDateString();\n            const displayDate = isToday ? '오늘' : forecastDate.toLocaleDateString(undefined, {\n              weekday: 'long'\n            });\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"day\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: displayDate\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 28\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: new Date(forecast.dt * 1000).toLocaleDateString(undefined, {\n                    month: '2-digit',\n                    day: '2-digit'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n                alt: forecast.weather[0].description,\n                style: {\n                  width: '50px',\n                  height: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [Math.round(forecast.main.temp_min), \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [Math.round(forecast.main.temp_max), \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backMove,\n        className: \"more\",\n        children: \"\\uB4A4\\uB85C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherPage, \"pjfYu6UZ33W/Rb5/aJQcqYeXM+s=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = WeatherPage;\nexport default WeatherPage;\nvar _c;\n$RefreshReg$(_c, \"WeatherPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","axios","jsxDEV","_jsxDEV","getCustomWeatherDescription","description","toLowerCase","getBackgroundClass","weather","hour","includes","WeatherPage","_s","navigate","city","weatherData","setWeatherData","forecastData","setForecastData","isLoading","setIsLoading","backgroundClass","setBackgroundClass","now","Date","twentyFourHoursLater","weatherDescription","currentHour","getHours","newBackgroundClass","fetchWeather","apiKey","mappedCity","cityMapping","weatherResponse","get","params","q","appid","units","lang","forecastResponse","data","error","alert","response","message","backMove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","style","width","height","Math","round","main","temp","temp_min","temp_max","list","filter","forecast","dt","map","index","toLocaleTimeString","hour12","_","forecastDate","isToday","toDateString","displayDate","toLocaleDateString","undefined","weekday","month","day","onClick","_c","$RefreshReg$"],"sources":["D:/project/react_project/src/pages/WeatherPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './styles.scss'; // SCSS 파일 import\r\n\r\n// 날씨 설명을 사용자 정의 설명으로 변환하는 함수\r\nfunction getCustomWeatherDescription(description) {\r\n  switch (description.toLowerCase()) {\r\n    case 'clear sky':\r\n      return '맑은 하늘';\r\n    case 'few clouds':\r\n      return '조금 구름';\r\n    case 'scattered clouds':\r\n      return '흩어진 구름';\r\n    case 'rain':\r\n    case 'light rain':\r\n      return '비 오는 날';\r\n    case 'snow':\r\n      return '눈 오는 날';\r\n    default:\r\n      return description; // 기본적으로 원래의 설명을 사용\r\n  }\r\n}\r\n\r\n// 날씨와 시간에 따라 배경 클래스를 반환하는 함수\r\nfunction getBackgroundClass(weather, hour) {\r\n  if (!weather) return 'default';\r\n\r\n  if (weather.toLowerCase() === 'clear sky') {\r\n    return hour >= 6 && hour < 18 ? 'day-clear' : 'night-clear';\r\n  } else if (weather.toLowerCase().includes('rain')) {\r\n    return 'rainy';\r\n  } else if (weather.toLowerCase() === 'snow') {\r\n    return 'snowy';\r\n  } else if (weather.toLowerCase().includes('cloud')) {\r\n    return hour >= 6 && hour < 18 ? 'day-cloudy' : 'night-cloudy';\r\n  } else {\r\n    return 'default';\r\n  }\r\n}\r\n\r\nfunction WeatherPage() {\r\n  const navigate = useNavigate();\r\n  const { city } = useParams();\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [backgroundClass, setBackgroundClass] = useState('default');\r\n  const now = Date.now();\r\n  const twentyFourHoursLater = now + 24 * 60 * 60 * 1000; // 현재 시간 + 24시간\r\n\r\n  // 날씨 데이터 로드 후 배경 클래스 업데이트\r\n  useEffect(() => {\r\n    if (weatherData) {\r\n      const weatherDescription = weatherData.weather[0].description;\r\n      const currentHour = new Date().getHours();\r\n      const newBackgroundClass = getBackgroundClass(weatherDescription, currentHour);\r\n      setBackgroundClass(newBackgroundClass);\r\n    }\r\n  }, [weatherData]);\r\n\r\n  // 날씨 및 예보 데이터 fetch\r\n  useEffect(() => {\r\n    const fetchWeather = async () => {\r\n      setIsLoading(true);\r\n      const apiKey = '28e07dfa61cced0cd42f9dc297ccc2f8'; // API 키\r\n      const mappedCity = cityMapping[city] || city; // 도시 매핑 (필요에 따라 정의)\r\n\r\n      try {\r\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n        setWeatherData(weatherResponse.data);\r\n        setForecastData(forecastResponse.data);\r\n      } catch (error) {\r\n        alert(error.response.data.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchWeather();\r\n  }, [city]);\r\n\r\n  // 뒤로 가기 버튼 핸들러\r\n  const backMove = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className={`background ${backgroundClass}`}>\r\n      <div className=\"weatherpage\">\r\n        <h2>{`${city}`}</h2>\r\n        {isLoading ? (\r\n          <div className=\"loading\">\r\n            <p>날씨 정보를 불러오는 중입니다...</p>\r\n          </div>\r\n        ) : (\r\n          weatherData && forecastData && (\r\n            <div>\r\n              <div className=\"today\">\r\n                <div className='currentTemp'>\r\n                  <img\r\n                    src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\r\n                    alt={weatherData.weather[0].description}\r\n                    style={{ width: '120px', height: '120px' }}\r\n                  />\r\n                  <p>{Math.round(weatherData.main.temp)}&deg;</p>\r\n                </div>\r\n                <h3>{getCustomWeatherDescription(weatherData.weather[0].description)}</h3>\r\n                <div className='temp'>\r\n                  <p>최저 : {Math.round(weatherData.main.temp_min)}&deg;</p>\r\n                  <p>최고 : {Math.round(weatherData.main.temp_max)}&deg;</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"hour\">\r\n                <div className=\"scroll-container\">\r\n                  {forecastData.list\r\n                    .filter((forecast) => forecast.dt * 1000 >= now && forecast.dt * 1000 <= twentyFourHoursLater)\r\n                    .map((forecast, index) => (\r\n                      <div key={index} className=\"forecast\">\r\n                        <p><strong>{new Date(forecast.dt * 1000).toLocaleTimeString([], { hour: '2-digit', hour12: false })}</strong></p>\r\n                        <img\r\n                          src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`}\r\n                          alt={forecast.weather[0].description}\r\n                          style={{ width: '50px', height: '50px' }}\r\n                        />\r\n                        <p>{Math.round(forecast.main.temp)}&deg;C</p>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"week\">\r\n                {forecastData.list.filter((_, index) => index % 8 === 0).map((forecast, index) => {\r\n                  const forecastDate = new Date(forecast.dt * 1000);\r\n                  const isToday = forecastDate.toDateString() === new Date().toDateString();\r\n                  const displayDate = isToday ? '오늘' : forecastDate.toLocaleDateString(undefined, { weekday: 'long' });\r\n                  return (\r\n                    <div key={index} className=\"forecast\">\r\n                      <div className=\"day\">\r\n                        <p><strong>{displayDate}</strong></p>\r\n                        <p>{new Date(forecast.dt * 1000).toLocaleDateString(undefined, { month: '2-digit', day: '2-digit' })}</p>\r\n                      </div>\r\n                      <img\r\n                        src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`}\r\n                        alt={forecast.weather[0].description}\r\n                        style={{ width: '50px', height: '50px' }}\r\n                      />\r\n                      <p>{Math.round(forecast.main.temp_min)}&deg;</p>\r\n                      <p>{Math.round(forecast.main.temp_max)}&deg;</p>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )\r\n        )}\r\n        <button onClick={backMove} className=\"more\">뒤로</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}