{"ast":null,"code":"var _jsxFileName = \"/Volumes/dang/Project/react_project/src/pages/WeatherPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  text-align: center;\n`;\n_c = Container;\nconst Button = styled.button`\n  text-indent:-9999px;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  position: fixed;\n  right: 15px;\n  top: 20px;\n`;\n_c2 = Button;\nconst LoadingSpinner = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 300px;\n  left: 50%;\n  margin-left: -150px;\n  height: 3px;\n  background: rgba(255, 255, 255, .1);\n  &:before {\n    animation: progress1 4s infinite;\n    transform-origin: 0 0;\n    content: \"\";\n    display: block;\n    width: 300px;\n    height: 100%;\n    background: linear-gradient(to right, rgba(255, 255, 255, 0.1) 10%, rgba(255, 255, 255, 0.4) 80%, rgba(255, 255, 255, 1));\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    animation: progress2 4s infinite;\n    transform-origin: 90% 50%;\n    margin-left: -24px;\n    top: -9px;\n    width: 30px;\n    height: 21px;\n    border-radius: 2px;\n    background: rgba(210, 189, 255, .55);\n    filter: blur(8px);\n    box-shadow: 0 0 10px 6px rgba(210, 189, 255, .4),\n                -20px 0 15px 4px rgba(210, 189, 255, .3),\n                -40px 0 15px 2px rgba(210, 189, 255, .2),\n                -60px 0 10px 1px rgba(210, 189, 255, .1),\n                -80px 0 10px 1px rgba(210, 189, 255, .05);\n  }\n  @keyframes progress1 {\n    0% {\n      transform: scalex(0);\n      opacity: .5;\n    }\n    90% {\n      transform: scalex(1);\n      opacity: 1;\n    }\n    100% {\n      transform: scalex(1);\n      opacity: 0;\n    }\n  }\n  \n  @keyframes progress2 {\n    0% {\n      transform: scale(.3, .8) translatez(0);\n      opacity: 0;\n    }\n    90% {\n      transform: scale(1, 1) translatex(300px) translatez(0);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(1, 1) translatex(300px) translatez(0);\n      opacity: 0;\n    }\n  }\n`;\n_c3 = LoadingSpinner;\nconst cityMapping = {\n  '서울': 'Seoul',\n  '인천': 'Incheon',\n  '수원': 'Suwon-si',\n  '성남': 'Seongnam-si',\n  '고양': 'Goyang-si',\n  '부산': 'Busan',\n  '대구': 'Daegu',\n  '광주': 'Gwangju',\n  '대전': 'Daejeon',\n  '울산': 'Ulsan',\n  '세종': 'Sejong'\n};\nfunction getTodayMinMaxTemp(forecastData) {\n  const today = new Date().toDateString(); // 오늘 날짜 가져오기\n  const todayForecasts = forecastData.list.filter(forecast => {\n    const forecastDate = new Date(forecast.dt * 1000).toDateString();\n    return forecastDate === today; // 오늘 날짜만 필터링\n  });\n  const minTemp = Math.min(...todayForecasts.map(forecast => forecast.main.temp_min));\n  const maxTemp = Math.max(...todayForecasts.map(forecast => forecast.main.temp_max));\n  return {\n    minTemp,\n    maxTemp\n  };\n}\nfunction WeatherPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    city\n  } = useParams();\n  const [weatherData, setWeatherData] = useState(null);\n  const [minMaxTemp, setMinMaxTemp] = useState({\n    minTemp: null,\n    maxTemp: null\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [forecastData, setForecastData] = useState(null);\n  const now = Date.now();\n  const twentyFourHoursLater = now + 24 * 60 * 60 * 1000; // 현재 시간 + 24시간\n  const [backgroundClass, setBackgroundClass] = useState('default');\n  useEffect(() => {\n    const fetchWeather = async () => {\n      setIsLoading(true);\n      const apiKey = '28e07dfa61cced0cd42f9dc297ccc2f8'; // 나의 apiKey\n      const mappedCity = cityMapping[city] || city;\n      try {\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        setWeatherData(weatherResponse.data);\n        setForecastData(forecastResponse.data);\n      } catch (error) {\n        alert(error.response.data.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchWeather();\n  }, [city]);\n  const backMove = () => {\n    navigate('/');\n  };\n  useEffect(() => {\n    if (forecastData) {\n      const {\n        minTemp,\n        maxTemp\n      } = getTodayMinMaxTemp(forecastData);\n      setMinMaxTemp({\n        minTemp,\n        maxTemp\n      });\n    }\n  }, [forecastData]);\n  function getCustomWeatherDescription(description) {\n    switch (description) {\n      case '맑음':\n        return '맑은 하늘';\n      case '튼구름':\n        return '구름 많음';\n      case '실 비':\n        return '가벼운 비';\n      default:\n        return description;\n      // 기본적으로 원래의 설명을 사용\n    }\n  }\n  useEffect(() => {\n    const hour = new Date().getHours();\n    const newBackgroundClass = getBackgroundClassByTime(hour);\n    setBackgroundClass(newBackgroundClass);\n  }, []);\n  function getBackgroundClassByTime(hour) {\n    return hour >= 6 && hour < 18 ? 'daytime' : 'nighttime';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `background ${backgroundClass}`,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"weatherpage\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: `${city}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this), weatherData && forecastData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"currentTemp\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`,\n              alt: weatherData.weather[0].description,\n              style: {\n                width: '120px',\n                height: '120px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(weatherData.main.temp), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: getCustomWeatherDescription(weatherData.weather[0].description)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temp\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uCD5C\\uC800 : \", Math.round(minMaxTemp.minTemp), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uCD5C\\uACE0 : \", Math.round(minMaxTemp.maxTemp), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hour\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"scroll-container\",\n              children: forecastData.list.filter(forecast => forecast.dt * 1000 >= now && forecast.dt * 1000 <= twentyFourHoursLater) // 현재 시간과 24시간 이후의 데이터만 필터링\n              .map((forecast, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: new Date(forecast.dt * 1000).toLocaleTimeString([], {\n                      hour: '2-digit',\n                      hour12: false\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 20\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n                  alt: forecast.weather[0].description,\n                  style: {\n                    width: '50px',\n                    height: '50px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [Math.round(forecast.main.temp), \"\\xB0C \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 17\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week\",\n          children: forecastData.list.filter((_, index) => index % 8 === 0).map((forecast, index) => {\n            const forecastDate = new Date(forecast.dt * 1000); // 예보 날짜\n            const isToday = forecastDate.toDateString() === new Date().toDateString(); // 오늘인지 확인\n            const options = {\n              weekday: 'long'\n            }; // 요일 포맷 설정\n            const displayDate = isToday ? '오늘' : forecastDate.toLocaleDateString(undefined, options); // 오늘은 '오늘', 나머지는 요일로 표시\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"day\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: displayDate\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: new Date(forecast.dt * 1000).toLocaleDateString(undefined, {\n                    month: '2-digit',\n                    day: '2-digit'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n                alt: weatherData.weather[0].description,\n                style: {\n                  width: '50px',\n                  height: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [Math.round(forecast.main.temp_min), \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [Math.round(forecast.main.temp_max), \"\\xB0\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uB0A0\\uC528 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: backMove,\n        className: \"more\",\n        children: \"\\uB4A4\\uB85C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherPage, \"23V8ptmSkYp+uBcH1QQ/COG29N8=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c4 = WeatherPage;\nexport default WeatherPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"LoadingSpinner\");\n$RefreshReg$(_c4, \"WeatherPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","styled","jsxDEV","_jsxDEV","Container","div","_c","Button","button","_c2","LoadingSpinner","_c3","cityMapping","getTodayMinMaxTemp","forecastData","today","Date","toDateString","todayForecasts","list","filter","forecast","forecastDate","dt","minTemp","Math","min","map","main","temp_min","maxTemp","max","temp_max","WeatherPage","_s","navigate","city","weatherData","setWeatherData","minMaxTemp","setMinMaxTemp","isLoading","setIsLoading","setForecastData","now","twentyFourHoursLater","backgroundClass","setBackgroundClass","fetchWeather","apiKey","mappedCity","weatherResponse","get","params","q","appid","units","lang","forecastResponse","data","error","alert","response","message","backMove","getCustomWeatherDescription","description","hour","getHours","newBackgroundClass","getBackgroundClassByTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","weather","icon","alt","style","width","height","round","temp","index","toLocaleTimeString","hour12","_","isToday","options","weekday","displayDate","toLocaleDateString","undefined","month","day","onClick","_c4","$RefreshReg$"],"sources":["/Volumes/dang/Project/react_project/src/pages/WeatherPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  text-indent:-9999px;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  position: fixed;\r\n  right: 15px;\r\n  top: 20px;\r\n`;\r\n\r\nconst LoadingSpinner = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  width: 300px;\r\n  left: 50%;\r\n  margin-left: -150px;\r\n  height: 3px;\r\n  background: rgba(255, 255, 255, .1);\r\n  &:before {\r\n    animation: progress1 4s infinite;\r\n    transform-origin: 0 0;\r\n    content: \"\";\r\n    display: block;\r\n    width: 300px;\r\n    height: 100%;\r\n    background: linear-gradient(to right, rgba(255, 255, 255, 0.1) 10%, rgba(255, 255, 255, 0.4) 80%, rgba(255, 255, 255, 1));\r\n  }\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    animation: progress2 4s infinite;\r\n    transform-origin: 90% 50%;\r\n    margin-left: -24px;\r\n    top: -9px;\r\n    width: 30px;\r\n    height: 21px;\r\n    border-radius: 2px;\r\n    background: rgba(210, 189, 255, .55);\r\n    filter: blur(8px);\r\n    box-shadow: 0 0 10px 6px rgba(210, 189, 255, .4),\r\n                -20px 0 15px 4px rgba(210, 189, 255, .3),\r\n                -40px 0 15px 2px rgba(210, 189, 255, .2),\r\n                -60px 0 10px 1px rgba(210, 189, 255, .1),\r\n                -80px 0 10px 1px rgba(210, 189, 255, .05);\r\n  }\r\n  @keyframes progress1 {\r\n    0% {\r\n      transform: scalex(0);\r\n      opacity: .5;\r\n    }\r\n    90% {\r\n      transform: scalex(1);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scalex(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n  \r\n  @keyframes progress2 {\r\n    0% {\r\n      transform: scale(.3, .8) translatez(0);\r\n      opacity: 0;\r\n    }\r\n    90% {\r\n      transform: scale(1, 1) translatex(300px) translatez(0);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scale(1, 1) translatex(300px) translatez(0);\r\n      opacity: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst cityMapping = {\r\n  '서울': 'Seoul',\r\n  '인천': 'Incheon',\r\n  '수원': 'Suwon-si',\r\n  '성남': 'Seongnam-si',\r\n  '고양': 'Goyang-si',\r\n  '부산': 'Busan',\r\n  '대구': 'Daegu',\r\n  '광주': 'Gwangju',\r\n  '대전': 'Daejeon',\r\n  '울산': 'Ulsan',\r\n  '세종': 'Sejong'\r\n};\r\n\r\nfunction getTodayMinMaxTemp(forecastData) {\r\n  const today = new Date().toDateString(); // 오늘 날짜 가져오기\r\n  const todayForecasts = forecastData.list.filter((forecast) => {\r\n    const forecastDate = new Date(forecast.dt * 1000).toDateString();\r\n    return forecastDate === today; // 오늘 날짜만 필터링\r\n  });\r\n\r\n  const minTemp = Math.min(...todayForecasts.map(forecast => forecast.main.temp_min));\r\n  const maxTemp = Math.max(...todayForecasts.map(forecast => forecast.main.temp_max));\r\n\r\n  return { minTemp, maxTemp };\r\n}\r\n\r\n\r\nfunction WeatherPage() {\r\n  const navigate = useNavigate();\r\n  const { city } = useParams();\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [minMaxTemp, setMinMaxTemp] = useState({ minTemp: null, maxTemp: null });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const now = Date.now();\r\n  const twentyFourHoursLater = now + 24 * 60 * 60 * 1000; // 현재 시간 + 24시간\r\n  const [backgroundClass, setBackgroundClass] = useState('default');\r\n    \r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchWeather = async () => {\r\n      setIsLoading(true);\r\n      const apiKey = '28e07dfa61cced0cd42f9dc297ccc2f8'; // 나의 apiKey\r\n      const mappedCity = cityMapping[city] || city;\r\n\r\n      try {\r\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n        setWeatherData(weatherResponse.data);\r\n        setForecastData(forecastResponse.data);\r\n      } catch (error) {\r\n        alert(error.response.data.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchWeather();\r\n  }, [city]);\r\n\r\n  const backMove = () => {\r\n    navigate('/');\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (forecastData) {\r\n      const { minTemp, maxTemp } = getTodayMinMaxTemp(forecastData);\r\n      setMinMaxTemp({ minTemp, maxTemp });\r\n    }\r\n  }, [forecastData]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function getCustomWeatherDescription(description) {\r\n    switch (description) {\r\n      case '맑음':\r\n        return '맑은 하늘';\r\n      case '튼구름':\r\n        return '구름 많음';\r\n      case '실 비':\r\n        return '가벼운 비';\r\n      default:\r\n        return description; // 기본적으로 원래의 설명을 사용\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const hour = new Date().getHours();\r\n    const newBackgroundClass = getBackgroundClassByTime(hour);\r\n    setBackgroundClass(newBackgroundClass);\r\n  }, []);\r\n\r\n  function getBackgroundClassByTime(hour) {\r\n    return hour >= 6 && hour < 18 ? 'daytime' : 'nighttime';\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={`background ${backgroundClass}`}>\r\n    <Container className=\"weatherpage\">\r\n      <h2>{`${city}`}</h2>\r\n      {weatherData && forecastData ? (\r\n        <div>\r\n          <div className=\"today\">\r\n            <div className='currentTemp'>\r\n              <img src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} alt={weatherData.weather[0].description} style={{ width: '120px', height: '120px' }} />\r\n              <p>{Math.round(weatherData.main.temp)}&deg;</p>\r\n            </div>\r\n            <h3>{getCustomWeatherDescription(weatherData.weather[0].description)}</h3>\r\n            <div className='temp'>\r\n              <p>최저 : {Math.round(minMaxTemp.minTemp)}&deg;</p>\r\n              <p>최고 : {Math.round(minMaxTemp.maxTemp)}&deg;</p>\r\n            </div>\r\n            <div className=\"hour\">\r\n            <div className=\"scroll-container\">\r\n            {\r\n          forecastData.list\r\n            .filter((forecast) => forecast.dt * 1000 >= now && forecast.dt * 1000 <= twentyFourHoursLater) // 현재 시간과 24시간 이후의 데이터만 필터링\r\n            .map((forecast, index) => (\r\n              <div key={index} className=\"forecast\">\r\n                <p><strong>{new Date(forecast.dt * 1000).toLocaleTimeString([], { hour: '2-digit', hour12: false })}</strong></p>\r\n                <img src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`} alt={forecast.weather[0].description} style={{ width: '50px', height: '50px' }} />\r\n                <p>{Math.round(forecast.main.temp)}&deg;C </p>\r\n              </div>\r\n            ))\r\n            }\r\n      </div>\r\n    </div>\r\n          </div>\r\n          <div className=\"week\">\r\n            {\r\n              forecastData.list.filter((_, index) => index % 8 === 0).map((forecast, index) => {\r\n                const forecastDate = new Date(forecast.dt * 1000); // 예보 날짜\r\n                const isToday = forecastDate.toDateString() === new Date().toDateString(); // 오늘인지 확인\r\n                const options = { weekday: 'long' }; // 요일 포맷 설정\r\n                const displayDate = isToday ? '오늘' : forecastDate.toLocaleDateString(undefined, options); // 오늘은 '오늘', 나머지는 요일로 표시\r\n                return (\r\n                  <div key={index} className=\"forecast\">\r\n                    <div className=\"day\">\r\n                      <p><strong>{displayDate}</strong></p>\r\n                      <p>{new Date(forecast.dt * 1000).toLocaleDateString(undefined, { month: '2-digit', day: '2-digit' })}</p>\r\n                    </div>\r\n                    <img src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`} alt={weatherData.weather[0].description} style={{ width: '50px', height: '50px' }} />\r\n                    <p>{Math.round(forecast.main.temp_min)}&deg;</p>\r\n                    <p>{Math.round(forecast.main.temp_max)}&deg;</p>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"loading\">\r\n          <LoadingSpinner />\r\n          <p>날씨 정보를 불러오는 중입니다...</p>\r\n        </div>\r\n      )}\r\n      <Button onClick={backMove} className=\"more\">뒤로</Button>\r\n    </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default WeatherPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}