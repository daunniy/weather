{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { validateCartItem } from '../utils/cartUtils';\nconst loadCartItems = () => {\n  try {\n    const serializedCart = localStorage.getItem('cartItems');\n    if (serializedCart === null) {\n      return [];\n    }\n    return JSON.parse(serializedCart);\n  } catch (err) {\n    console.error('Error loading cart items from localStorage', err);\n    return [];\n  }\n};\nconst saveCartItems = items => {\n  try {\n    const serializedCart = JSON.stringify(items);\n    localStorage.setItem('cartItems', serializedCart);\n  } catch (err) {\n    console.error('Error saving cart items to localStorage', err);\n  }\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: loadCartItems()\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const newItem = action.payload;\n      console.log(\"Received item in addToCart:\", newItem); // 로그 추가\n      try {\n        validateCartItem(newItem);\n        const existingItemIndex = state.items.findIndex(item => item.id === newItem.id && item.selectedColor === newItem.selectedColor && item.selectedSize === newItem.selectedSize);\n        if (existingItemIndex !== -1) {\n          // 이미 존재하는 아이템이면 수량만 증가\n          state.items[existingItemIndex].quantity += newItem.quantity;\n        } else {\n          // 새 아이템이면 배열에 추가\n          state.items.push(newItem);\n        }\n        saveCartItems(state.items);\n        console.log(\"Item added successfully:\", newItem); // 성공 로그\n      } catch (err) {\n        console.error('Error adding item to cart:', err.message);\n        // 여기서 에러를 throw하지 않고 그냥 로그만 남깁니다.\n      }\n    },\n    removeFromCart: (state, action) => {\n      state.items = state.items.filter(item => item.id !== action.payload);\n      saveCartItems(state.items);\n    },\n    updateQuantity: (state, action) => {\n      const {\n        productId,\n        quantity\n      } = action.payload;\n      const item = state.items.find(item => item.id === productId);\n      if (item) {\n        item.quantity = quantity;\n        saveCartItems(state.items);\n      }\n    }\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","validateCartItem","loadCartItems","serializedCart","localStorage","getItem","JSON","parse","err","console","error","saveCartItems","items","stringify","setItem","cartSlice","name","initialState","reducers","addToCart","state","action","newItem","payload","log","existingItemIndex","findIndex","item","id","selectedColor","selectedSize","quantity","push","message","removeFromCart","filter","updateQuantity","productId","find","actions","reducer"],"sources":["/Volumes/dang/Project/react_project/src/features/cartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { validateCartItem } from '../utils/cartUtils';\r\n\r\nconst loadCartItems=()=>{\r\n  try {\r\n    const serializedCart = localStorage.getItem('cartItems');\r\n    if (serializedCart === null) {\r\n      return [];\r\n    }\r\n    return JSON.parse(serializedCart);\r\n  } catch (err) {\r\n    console.error('Error loading cart items from localStorage', err);\r\n    return [];\r\n  }\r\n}\r\n\r\nconst saveCartItems=(items)=>{\r\n  try {\r\n    const serializedCart = JSON.stringify(items);\r\n    localStorage.setItem('cartItems', serializedCart);\r\n  } catch (err) {\r\n    console.error('Error saving cart items to localStorage', err);\r\n  }\r\n}\r\n\r\nconst cartSlice = createSlice({\r\n  name:'cart',\r\n  initialState:{ items:loadCartItems() },\r\n  reducers:{\r\n    addToCart:(state, action)=>{\r\n      const newItem = action.payload;\r\n        console.log(\"Received item in addToCart:\", newItem); // 로그 추가\r\n        try {\r\n          validateCartItem(newItem);\r\n          const existingItemIndex = state.items.findIndex(item => \r\n            item.id === newItem.id && \r\n            item.selectedColor === newItem.selectedColor && \r\n            item.selectedSize === newItem.selectedSize\r\n          );\r\n  \r\n          if (existingItemIndex !== -1) {\r\n            // 이미 존재하는 아이템이면 수량만 증가\r\n            state.items[existingItemIndex].quantity += newItem.quantity;\r\n          } else {\r\n            // 새 아이템이면 배열에 추가\r\n            state.items.push(newItem);\r\n          }\r\n          saveCartItems(state.items);\r\n          console.log(\"Item added successfully:\", newItem); // 성공 로그\r\n        } catch (err) {\r\n          console.error('Error adding item to cart:', err.message);\r\n          // 여기서 에러를 throw하지 않고 그냥 로그만 남깁니다.\r\n        }\r\n    },\r\n    removeFromCart:(state, action)=>{\r\n      state.items = state.items.filter(item => item.id !== action.payload);\r\n      saveCartItems(state.items);\r\n    },\r\n    updateQuantity:(state, action)=>{\r\n      const { productId, quantity } = action.payload;\r\n      const item = state.items.find(item => item.id === productId);\r\n      if (item) {\r\n        item.quantity = quantity;\r\n        saveCartItems(state.items);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { addToCart, removeFromCart, updateQuantity } = cartSlice.actions;\r\nexport default cartSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}