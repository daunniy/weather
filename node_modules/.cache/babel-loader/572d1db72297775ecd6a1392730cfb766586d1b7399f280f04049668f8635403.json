{"ast":null,"code":"var _jsxFileName = \"/Volumes/dang/Project/react_project/src/pages/WeatherPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  text-align: center;\n`;\n_c = Container;\nconst Button = styled.button`\n  text-indent:-9999px;\n  border: none;\n  cursor: pointer;\n  padding: 0;\n  position: fixed;\n  right: 15px;\n  top: 20px;\n`;\n_c2 = Button;\nconst LoadingSpinner = styled.div`\n  position: absolute;\n  top: 50%;\n  width: 300px;\n  left: 50%;\n  margin-left: -150px;\n  height: 3px;\n  background: rgba(255, 255, 255, .1);\n  &:before {\n    animation: progress1 4s infinite;\n    transform-origin: 0 0;\n    content: \"\";\n    display: block;\n    width: 300px;\n    height: 100%;\n    background: linear-gradient(to right, rgba(255, 255, 255, 0.1) 10%, rgba(255, 255, 255, 0.4) 80%, rgba(255, 255, 255, 1));\n  }\n  &:after {\n    content: \"\";\n    position: absolute;\n    animation: progress2 4s infinite;\n    transform-origin: 90% 50%;\n    margin-left: -24px;\n    top: -9px;\n    width: 30px;\n    height: 21px;\n    border-radius: 2px;\n    background: rgba(210, 189, 255, .55);\n    filter: blur(8px);\n    box-shadow: 0 0 10px 6px rgba(210, 189, 255, .4),\n                -20px 0 15px 4px rgba(210, 189, 255, .3),\n                -40px 0 15px 2px rgba(210, 189, 255, .2),\n                -60px 0 10px 1px rgba(210, 189, 255, .1),\n                -80px 0 10px 1px rgba(210, 189, 255, .05);\n  }\n  @keyframes progress1 {\n    0% {\n      transform: scalex(0);\n      opacity: .5;\n    }\n    90% {\n      transform: scalex(1);\n      opacity: 1;\n    }\n    100% {\n      transform: scalex(1);\n      opacity: 0;\n    }\n  }\n  \n  @keyframes progress2 {\n    0% {\n      transform: scale(.3, .8) translatez(0);\n      opacity: 0;\n    }\n    90% {\n      transform: scale(1, 1) translatex(300px) translatez(0);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(1, 1) translatex(300px) translatez(0);\n      opacity: 0;\n    }\n  }\n`;\nconst cityMapping = {\n  '서울': 'Seoul',\n  '인천': 'Incheon',\n  '수원': 'Suwon-si',\n  '성남': 'Seongnam-si',\n  '고양': 'Goyang-si',\n  '부산': 'Busan',\n  '대구': 'Daegu',\n  '광주': 'Gwangju',\n  '대전': 'Daejeon',\n  '울산': 'Ulsan',\n  '세종': 'Sejong'\n};\nfunction WeatherPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    city\n  } = useParams();\n  const [weatherData, setWeatherData] = useState(null); // 현재 날씨 데이터 저장\n  const [forecastData, setForecastData] = useState(null); // 날씨 예보 데이터 저장\n  const [backgroundClass, setBackgroundClass] = useState('default'); // 배경 클래스\n\n  /**\r\n   * 시간 및 날씨에 따라 배경 클래스를 설정하는 함수\r\n   * @param {string} weatherDescription - 현재 날씨 설명\r\n   * @param {number} hour - 현재 시간 (24시간 형식)\r\n   * @returns {string} 배경 클래스명\r\n   */\n  const getBackgroundClass = (weatherDescription, hour) => {\n    if (weatherDescription === 'clear sky') {\n      return hour >= 6 && hour < 18 ? 'day-clear' : 'night-clear'; // 낮과 밤 맑음 구분\n    } else if (weatherDescription === 'rain' || weatherDescription === 'light rain') {\n      return 'rainy'; // 비\n    } else if (weatherDescription === 'snow') {\n      return 'snowy'; // 눈\n    } else if (weatherDescription.includes('cloud')) {\n      return hour >= 6 && hour < 18 ? 'day-cloudy' : 'night-cloudy'; // 구름 낮과 밤 구분\n    } else {\n      return 'default'; // 기타 날씨\n    }\n  };\n\n  /**\r\n   * OpenWeather API를 통해 날씨 데이터를 가져오는 함수\r\n   */\n  useEffect(() => {\n    const fetchWeather = async () => {\n      setIsLoading(true);\n      const apiKey = 'YOUR_API_KEY';\n      const mappedCity = cityMapping[city] || city; // 도시명을 API에서 인식 가능한 형태로 매핑\n\n      try {\n        // 현재 날씨 데이터 호출\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n\n        // 날씨 예보 데이터 호출\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\n          params: {\n            q: `${mappedCity},KR`,\n            appid: apiKey,\n            units: 'metric',\n            lang: 'kr'\n          }\n        });\n        setWeatherData(weatherResponse.data); // 현재 날씨 데이터 저장\n        setForecastData(forecastResponse.data); // 날씨 예보 데이터 저장\n\n        // 배경 클래스 설정\n        const weatherDescription = weatherResponse.data.weather[0].description; // 날씨 상태\n        const currentHour = new Date().getHours(); // 현재 시간 (시)\n        const newBackgroundClass = getBackgroundClass(weatherDescription, currentHour); // 배경 클래스 결정\n        setBackgroundClass(newBackgroundClass); // 배경 클래스 상태 업데이트\n      } catch (error) {\n        alert(error.response ? error.response.data.message : \"날씨 정보를 불러올 수 없습니다.\");\n      } finally {\n        setIsLoading(false); // 로딩 상태 해제\n      }\n    };\n    fetchWeather();\n  }, [city]);\n\n  // 뒤로가기 함수\n  const backMove = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `background ${backgroundClass}`,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"weatherpage\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: `${city}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), weatherData && forecastData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"currentTemp\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`,\n              alt: weatherData.weather[0].description,\n              style: {\n                width: '120px',\n                height: '120px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [Math.round(weatherData.main.temp), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: weatherData.weather[0].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temp\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uCD5C\\uC800 : \", Math.round(weatherData.main.temp_min), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\uCD5C\\uACE0 : \", Math.round(weatherData.main.temp_max), \"\\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hour\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"scroll-container\",\n              children: forecastData.list.map((forecast, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"forecast\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: new Date(forecast.dt * 1000).toLocaleTimeString([], {\n                      hour: '2-digit',\n                      hour12: false\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 26\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`,\n                  alt: forecast.weather[0].description,\n                  style: {\n                    width: '50px',\n                    height: '50px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [Math.round(forecast.main.temp), \"\\xB0C\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB0A0\\uC528 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uB294 \\uC911\\uC785\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: backMove,\n        className: \"more\",\n        children: \"\\uB4A4\\uB85C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherPage, \"8k738G7j1lZiMzjKYJxvFCroL8E=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c3 = WeatherPage;\nexport default WeatherPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"WeatherPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","styled","jsxDEV","_jsxDEV","Container","div","_c","Button","button","_c2","LoadingSpinner","cityMapping","WeatherPage","_s","navigate","city","weatherData","setWeatherData","forecastData","setForecastData","backgroundClass","setBackgroundClass","getBackgroundClass","weatherDescription","hour","includes","fetchWeather","setIsLoading","apiKey","mappedCity","weatherResponse","get","params","q","appid","units","lang","forecastResponse","data","weather","description","currentHour","Date","getHours","newBackgroundClass","error","alert","response","message","backMove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","icon","alt","style","width","height","Math","round","main","temp","temp_min","temp_max","list","map","forecast","index","dt","toLocaleTimeString","hour12","onClick","_c3","$RefreshReg$"],"sources":["/Volumes/dang/Project/react_project/src/pages/WeatherPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  text-indent:-9999px;\r\n  border: none;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  position: fixed;\r\n  right: 15px;\r\n  top: 20px;\r\n`;\r\n\r\nconst LoadingSpinner = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  width: 300px;\r\n  left: 50%;\r\n  margin-left: -150px;\r\n  height: 3px;\r\n  background: rgba(255, 255, 255, .1);\r\n  &:before {\r\n    animation: progress1 4s infinite;\r\n    transform-origin: 0 0;\r\n    content: \"\";\r\n    display: block;\r\n    width: 300px;\r\n    height: 100%;\r\n    background: linear-gradient(to right, rgba(255, 255, 255, 0.1) 10%, rgba(255, 255, 255, 0.4) 80%, rgba(255, 255, 255, 1));\r\n  }\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    animation: progress2 4s infinite;\r\n    transform-origin: 90% 50%;\r\n    margin-left: -24px;\r\n    top: -9px;\r\n    width: 30px;\r\n    height: 21px;\r\n    border-radius: 2px;\r\n    background: rgba(210, 189, 255, .55);\r\n    filter: blur(8px);\r\n    box-shadow: 0 0 10px 6px rgba(210, 189, 255, .4),\r\n                -20px 0 15px 4px rgba(210, 189, 255, .3),\r\n                -40px 0 15px 2px rgba(210, 189, 255, .2),\r\n                -60px 0 10px 1px rgba(210, 189, 255, .1),\r\n                -80px 0 10px 1px rgba(210, 189, 255, .05);\r\n  }\r\n  @keyframes progress1 {\r\n    0% {\r\n      transform: scalex(0);\r\n      opacity: .5;\r\n    }\r\n    90% {\r\n      transform: scalex(1);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scalex(1);\r\n      opacity: 0;\r\n    }\r\n  }\r\n  \r\n  @keyframes progress2 {\r\n    0% {\r\n      transform: scale(.3, .8) translatez(0);\r\n      opacity: 0;\r\n    }\r\n    90% {\r\n      transform: scale(1, 1) translatex(300px) translatez(0);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scale(1, 1) translatex(300px) translatez(0);\r\n      opacity: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst cityMapping = {\r\n  '서울': 'Seoul',\r\n  '인천': 'Incheon',\r\n  '수원': 'Suwon-si',\r\n  '성남': 'Seongnam-si',\r\n  '고양': 'Goyang-si',\r\n  '부산': 'Busan',\r\n  '대구': 'Daegu',\r\n  '광주': 'Gwangju',\r\n  '대전': 'Daejeon',\r\n  '울산': 'Ulsan',\r\n  '세종': 'Sejong'\r\n};\r\n\r\nfunction WeatherPage() {\r\n  const navigate = useNavigate();\r\n  const { city } = useParams();\r\n  const [weatherData, setWeatherData] = useState(null); // 현재 날씨 데이터 저장\r\n  const [forecastData, setForecastData] = useState(null); // 날씨 예보 데이터 저장\r\n  const [backgroundClass, setBackgroundClass] = useState('default'); // 배경 클래스\r\n\r\n  /**\r\n   * 시간 및 날씨에 따라 배경 클래스를 설정하는 함수\r\n   * @param {string} weatherDescription - 현재 날씨 설명\r\n   * @param {number} hour - 현재 시간 (24시간 형식)\r\n   * @returns {string} 배경 클래스명\r\n   */\r\n  const getBackgroundClass = (weatherDescription, hour) => {\r\n    if (weatherDescription === 'clear sky') {\r\n      return hour >= 6 && hour < 18 ? 'day-clear' : 'night-clear'; // 낮과 밤 맑음 구분\r\n    } else if (weatherDescription === 'rain' || weatherDescription === 'light rain') {\r\n      return 'rainy'; // 비\r\n    } else if (weatherDescription === 'snow') {\r\n      return 'snowy'; // 눈\r\n    } else if (weatherDescription.includes('cloud')) {\r\n      return hour >= 6 && hour < 18 ? 'day-cloudy' : 'night-cloudy'; // 구름 낮과 밤 구분\r\n    } else {\r\n      return 'default'; // 기타 날씨\r\n    }\r\n  };\r\n\r\n  /**\r\n   * OpenWeather API를 통해 날씨 데이터를 가져오는 함수\r\n   */\r\n  useEffect(() => {\r\n    const fetchWeather = async () => {\r\n      setIsLoading(true);\r\n      const apiKey = 'YOUR_API_KEY';\r\n      const mappedCity = cityMapping[city] || city; // 도시명을 API에서 인식 가능한 형태로 매핑\r\n\r\n      try {\r\n        // 현재 날씨 데이터 호출\r\n        const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n\r\n        // 날씨 예보 데이터 호출\r\n        const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast`, {\r\n          params: {\r\n            q: `${mappedCity},KR`,\r\n            appid: apiKey,\r\n            units: 'metric',\r\n            lang: 'kr',\r\n          }\r\n        });\r\n\r\n        setWeatherData(weatherResponse.data); // 현재 날씨 데이터 저장\r\n        setForecastData(forecastResponse.data); // 날씨 예보 데이터 저장\r\n\r\n        // 배경 클래스 설정\r\n        const weatherDescription = weatherResponse.data.weather[0].description; // 날씨 상태\r\n        const currentHour = new Date().getHours(); // 현재 시간 (시)\r\n        const newBackgroundClass = getBackgroundClass(weatherDescription, currentHour); // 배경 클래스 결정\r\n        setBackgroundClass(newBackgroundClass); // 배경 클래스 상태 업데이트\r\n\r\n      } catch (error) {\r\n        alert(error.response ? error.response.data.message : \"날씨 정보를 불러올 수 없습니다.\");\r\n      } finally {\r\n        setIsLoading(false); // 로딩 상태 해제\r\n      }\r\n    };\r\n    fetchWeather();\r\n  }, [city]);\r\n\r\n  // 뒤로가기 함수\r\n  const backMove = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className={`background ${backgroundClass}`}>\r\n      <Container className=\"weatherpage\">\r\n        <h2>{`${city}`}</h2>\r\n        {weatherData && forecastData ? (\r\n          <div>\r\n            <div className=\"today\">\r\n              {/* 현재 날씨 정보 표시 */}\r\n              <div className='currentTemp'>\r\n                <img src={`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} alt={weatherData.weather[0].description} style={{ width: '120px', height: '120px' }} />\r\n                <p>{Math.round(weatherData.main.temp)}&deg;</p>\r\n              </div>\r\n              <h3>{weatherData.weather[0].description}</h3>\r\n              {/* 최저/최고 온도 */}\r\n              <div className='temp'>\r\n                <p>최저 : {Math.round(weatherData.main.temp_min)}&deg;</p>\r\n                <p>최고 : {Math.round(weatherData.main.temp_max)}&deg;</p>\r\n              </div>\r\n              {/* 시간별 예보 표시 */}\r\n              <div className=\"hour\">\r\n                <div className=\"scroll-container\">\r\n                  {forecastData.list.map((forecast, index) => (\r\n                    <div key={index} className=\"forecast\">\r\n                      <p><strong>{new Date(forecast.dt * 1000).toLocaleTimeString([], { hour: '2-digit', hour12: false })}</strong></p>\r\n                      <img src={`https://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`} alt={forecast.weather[0].description} style={{ width: '50px', height: '50px' }} />\r\n                      <p>{Math.round(forecast.main.temp)}&deg;C</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"loading\">날씨 정보를 불러오는 중입니다...</div>\r\n        )}\r\n        <Button onClick={backMove} className=\"more\">뒤로</Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}